---
- hosts: all
  become: yes
  
  vars:
    vm_name: debian
    vm_template: debian-12
    disk_size: 30
    ram_size: 2048
    cpu_cores: 2
    autostart: false
    network: priv0br
    configuration_script: configure_debian_12.sh
    
  tasks:
    - name: Generate SSH key "id_rsa".
      openssh_keypair:
        path: "/home/{{ ansible_user }}/.ssh/id_rsa"
        type: rsa
        size: 4096
        state: present
        force: no
        owner: "{{ ansible_user }}"
                
    - name: Ensure VM's disk is built.
      block:
        - name: Gather facts about storage pools
          community.libvirt.virt_pool:
            command: facts

        - name: Build VM's disk.
          block:            
            - set_fact:
                image: "{{ vm_name }}.qcow2"
                disk_size_in_gb: "{{ disk_size }}G"

            - name: Copy VM's configuration script.
              template:
                src: "./templates/{{ configuration_script }}"
                dest: "/tmp/{{ configuration_script }}"
                mode: '0777'        

            - name: Build VM's disk.
              when: image not in ansible_libvirt_pools.images.volumes
              command: virt-builder {{ vm_template }}
                                    --output /VMs/images/{{ image }}
                                    --format qcow2
                                    --size {{ disk_size_in_gb }}
                                    --hostname {{ vm_name }}
                                    --ssh-inject root:file:/home/{{ ansible_user }}/.ssh/id_rsa.pub
                                    --firstboot /tmp/{{ configuration_script }}
                                    
        - name: Refresh storage pool.
          community.libvirt.virt_pool:
            command: refresh
            name: images

    - name: Ensure VM is created.
      block:
        - name: List all VMs.
          community.libvirt.virt:
            command: list_vms
          register: all_vms    
          
        - name: Create VM.
          command: virt-install -n {{ vm_name }}
                                --ram {{ ram_size }}
                                --vcpus {{ cpu_cores }}
                                --os-variant linux2022
                                --network bridge={{ network }}
                                --graphics vnc
                                --hvm
                                --virt-type kvm
                                --disk vol=images/{{ image }},bus=virtio
                                --import
                                --noautoconsole
          when: vm_name not in all_vms.list_vms
          register: vm

        - name: Ensure VM booting on startup is configured.
          community.libvirt.virt:
            name: "{{ vm_name }}"
            autostart: "{{ autostart }}"
          
        - name: Ensure VM is up.
          community.libvirt.virt:
            name: "{{ vm_name }}"
            state: running

    - name: Ensure VM networking is working.
      block:            
        - name: Test VM's ICMP connectivity.
          command: bash -c "for i in `seq 1 60`; do date ; sleep 5 ; ping -c3 {{ vm_name }}.lab &>/dev/null && break ; done"
          register: ping_result
          failed_when: ping_result.rc != 0          

        - name: Test VM's SSH connectivity.
          command: bash -c "for i in `seq 1 60`; do date ; sleep 5 ; nc -vzw 2 {{ vm_name }}.lab 22 &>/dev/null && break ; done"
          register: ssh_result
          failed_when: ssh_result.rc != 0          
          
    
