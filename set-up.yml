---
- hosts: all
  become: yes

  vars:
    - force_rebuild: true
    - dummy_interface: dummy_host
    - public_bridge_interface: pub0br
    - private_bridge_interface: priv0br
    - ip_cidr_netmask: 16
    - public_network_ip: 172.16.0.0
    - public_bridge_ip: 172.16.0.1
    - public_router_ip: 172.16.0.2
    - private_network_ip: 172.31.0.0
    - private_bridge_ip: 172.31.0.1
    - private_router_ip: 172.31.0.2
    - vyos_iso_link: https://www.dropbox.com/scl/fi/vn3sg0y1mtfb38n9qf5kl/vyos-1-4-live.iso?rlkey=yup5rw1nd9eq2xbhzd1ivf4a2&dl=1
    - vyos_iso_checksum: sha1:61694c7c2c89643b64c79fa78a84a242b8f8ebf1
    - vyos_vm_name: VyOs-router
      
  tasks:
    - name: Run the equivalent of "apt-get update".
      ansible.builtin.apt:
        update_cache: yes
    
    - name: Configure networking.
      block:
        - name: Ensure bridge-utils is installed.
          package:
            name: bridge-utils
            state: present
        
        - name: Ensure public bridge is created.
          template:
            src: "./templates/public_bridge_interface"
            dest: "/etc/network/interfaces.d/{{ public_bridge_interface }}"
          register: bridge_result

        - name: Ensure private bridge is created.
          template:
            src: "./templates/private_bridge_interface"
            dest: "/etc/network/interfaces.d/{{ private_bridge_interface }}"

        - name: Generate random MAC address for dummy interface.
          command: python3 -c 'import os; print(":".join(["{:02x}".format(x) for x in b"\02x" + os.urandom(4)]))'
          register: random_mac
          when: bridge_result.changed

        - name: Create dummy interface.
          template:
            src: "./templates/dummy_interface"
            dest: "/etc/network/interfaces.d/{{ dummy_interface }}"
          with_items: "{{ random_mac['stdout'] }}"
          when: random_mac.changed    

        - name: Restart networking.
          service:
            name: networking
            state: restarted
            enabled: true
          when: bridge_result.changed

        - name: Ensure ipv4 packets forwarding is enabled part 1.
          sysctl:
            name: net.ipv4.ip_forward
            value: 1
            state: present

        - name: Ensure ipv4 packets forwarding is enabled part 2.
          sysctl:
            name: net.ipv4.conf.all.forwarding
            value: 1
            state: present

        - name: Ensure ipv6 packets forwarding is disabled.
          sysctl:
            name: net.ipv6.conf.all.disable_ipv6
            value: 1
            state: present

        - name: Ensure iptables-persistent is installed.
          package:
            name: iptables-persistent
            state: present

        - name: Render iptables' rules.
          template:
            src: "./templates/iptables_rules"
            dest: "/etc/iptables/rules.v4"
          register: iptables_render_result

        - name: Restart iptables.
          service:
            name: iptables
            state: restarted
            enabled: true 
          when: iptables_render_result.changed
          
        - name: Ensure network configuration is working as expected.
          block:
            - name: Test private bridge ip configuration.
              command: ping {{ private_bridge_ip }} -c 3

            - name: Test public bridge ip configuration.
              command: ping {{ public_bridge_ip }} -c 3

    - name: Install virtualization hypervisor.
      block:
        - name: Ensure QEMU is installed.
          package:
            name: qemu-kvm
            state: present
            
        - name: Ensure Libvirt is installed.
          package:
            name:
              - libvirt0
              - python3-libvirt
              - python3-lxml        
              - libvirt-dev
              - libvirt-clients
              - libvirt-daemon
              - libvirt-daemon-system
            state: present
            
        - name: Ensure virt tools are installed.
          package:
            name:
              - virtinst
              - libguestfs-tools
            state: present
            
    - name: Configure virtualization hypervisor.
      block:
        - name: Ensure USER is in QEMU groups.
          user:
            name: "{{ ansible_user }}"
            append: true
            groups: kvm,libvirt

        - name: Enable Libvirt.
          service:
            name: libvirtd
            state: started
            enabled: true

        - name: Ensure Libvirt's default network is destroyed.
          community.libvirt.virt_net:
            name: default
            state: absent

        - name: Ensure VM's directory exists.
          file:
            path: /VMs/
            state: directory
            mode: '0777'

        - name: Ensure VM's images directory exists.
          file:
            path: /VMs/images
            state: directory
            mode: '0777'

        - name: Ensure VM's ISOs directory exists.
          file:
            path: /VMs/isos
            state: directory
            mode: '0777'
            
        - name: List all storage pools
          community.libvirt.virt_pool:
            command: list_pools
          register: all_sps

        - set_fact:
            vms_pool_name: "images"

        - set_fact:
            isos_pool_name: "ISOs"
            
        - name: Define VM's storage pool.
          community.libvirt.virt_pool:
            command: define
            name: "{{ vms_pool_name }}"
            xml: '{{ lookup("template", "vm_storage_pool.xml") }}'
          when: vms_pool_name not in all_sps.list_pools

        - name: Ensure VM's storage pool is booting on startup.
          community.libvirt.virt_pool:
            name: "{{ vms_pool_name }}"
            autostart: true
          
        - name: Ensure VM's storage pool is up and running.
          community.libvirt.virt_pool:
            name: "{{ vms_pool_name }}"
            state: active
            autostart: true
            
        - name: Define ISO's storage pool
          community.libvirt.virt_pool:
            command: define
            name: "{{ isos_pool_name }}"
            xml: '{{ lookup("template", "iso_storage_pool.xml") }}'
          when: isos_pool_name not in all_sps.list_pools         

          
        - name: Ensure ISO's storage pool is booting on startup.
          community.libvirt.virt_pool:
            name: "{{ isos_pool_name }}"
            autostart: true
          
        - name: Ensure ISO's storage pool is up and running.
          community.libvirt.virt_pool:
            name: "{{ isos_pool_name }}"
            state: active
            autostart: true
            
    - name: Ensure router VM is up and running.
      block:
        - name: Ensure expect is installed.
          package:
            name:
              - expect
            state: present
            
        - name: List all VMs
          community.libvirt.virt:
            command: list_vms
          register: all_vms    

        - name: Ensure VyOs iso is downloaded.
          get_url:
            url: "{{ vyos_iso_link }}"
            dest: /VMs/isos/vyos-1-4.iso
            checksum: "{{ vyos_iso_checksum }}"
            mode: '0777'
          register: router_iso

        - name: Create router VM.
          when: router_iso.changed or force_rebuild
          block:
            - name: Create router VM.
              command: virt-install -n "{{ vyos_vm_name }}"
                          --ram 2048
                          --vcpus 2
                          --os-variant debian9
                          --network bridge="{{ public_bridge_interface }}"
                          --network bridge="{{ private_bridge_interface }}"                          
                          --graphics vnc
                          --hvm
                          --virt-type kvm
                          --disk path=/VMs/images/vyos-router.qcow2,bus=virtio,size=10,pool={{ vms_pool_name  }}
                          --cdrom /VMs/isos/vyos-1-4.iso
                          --noautoconsole
              when: vyos_vm_name not in all_vms.list_vms
              register: vm_created
              
            - name: Ensure router VM is up.
              community.libvirt.virt:
                name: "{{ vyos_vm_name }}"
                state: running
                autostart: true

            - name: Configure router VM.
              when: vm_created.changed
              block:
                - name: Copy router installation script.
                  template:
                    src: "./templates/install_vyos.sh"
                    dest: "/VMs/install_vyos.sh"
                    mode: '0777'        

                - name: Run router installation script.
                  command: "/VMs/install_vyos.sh"

                - name: Waiting for router VM to reboot.
                  pause: seconds=5

                - name: Ensure router VM is booting on atsrtup.
                  community.libvirt.virt:
                    name: "{{ vyos_vm_name }}"
                    autostart: true

                - name: Ensure router VM is up.
                  community.libvirt.virt:
                    name: "{{ vyos_vm_name }}"
                    state: running

                - name: Copy router's configuration script.
                  template:
                    src: "./templates/configure_vyos.sh"
                    dest: "/VMs/configure_vyos.sh"
                    mode: '0777'        

                - name: Run VyOs configuration script.
                  command: "/VMs/configure_vyos.sh"

            - name: Ensure host's dns is configured properly.
              block:
                - name: Ensure dns resolver is installed.
                  package:
                    name: systemd-resolved
                    state: present
                  register: resolver_installed

                - name: Ensure router VM is enlisted as primary dns server.
                  lineinfile:
                    path: /etc/systemd/resolved.conf
                    regexp: '^DNS='
                    line: "DNS={{ private_router_ip }} "
                  register: basic_dns

                - name: Ensure backup dns server is enabled.
                  lineinfile:
                    path: /etc/systemd/resolved.conf
                    regexp: '^FallbackDNS='
                    line: "FallbackDNS=1.1.1.1"
                  register: backup_dns
                  
                - name: Ensure dns resolver is restarted.
                  service:
                    name: systemd-resolved
                    state: restarted
                    enabled: true
                  when: resolver_installed.changed or basic_dns.changed or backup_dns.changed
                  
            - name: Ensure router VM is working as expected.
              block:
                - name: Test router's private ip configuration.
                  command: ping {{ private_router_ip }} -c 3
                  
                - name: Test router's public ip configuration.
                  command: ping {{ public_router_ip }} -c 3

                - name: Test router's dns configuration.
                  command: ping router.lab -c 3
