---
- hosts: all
  become: yes

  vars:
    - force_rebuild: true
    - desktop_interface: desktop
    - public_bridge: pub0br
    - public_bridge_ip: 172.16.0.1
    - public_bridge_cidr: "{{ public_bridge_ip }}/16"
    - router_public_ip: 172.16.0.2  
    - vyos_qcow_image_zip_link: https://www.dropbox.com/scl/fi/njeajfptc7av9wk3g3kzf/vyos-1-4-qcow-image.zip?rlkey=xp6ndaq6j0gj8h5zqnxdupuex&dl=1
    - vyos_vm_name: VyOs-router
      
  tasks:
  - name: Ensure QEMU is installed.
    package:
      name: qemu-kvm
      state: present

  - name: Ensure Libvirt is installed.
    package:
      name:
        - libvirt0
        - python3-libvirt
        - python3-lxml        
        - libvirt-dev
        - libvirt-clients
        - libvirt-daemon
        - libvirt-daemon-system
        - bridge-utils
      state: present
      
  - name: Ensure USER is in QEMU groups.
    user:
      name: "{{ ansible_user }}"
      append: true
      groups: kvm,libvirt
           
  - name: Enable Libvirt.
    service:
      name: libvirtd
      state: started
      enabled: true
      
  - name: Ensure Libvirt's default network is destroyed.
    community.libvirt.virt_net:
      name: default
      state: absent

  - name: Ensure public bridge is created.
    template:
      src: "./templates/public_bridge"
      dest: "/etc/network/interfaces.d/{{ public_bridge }}"
    register: bridge_result

  # - name: Ensure private bridge is created.
  #   template:
  #     src: "./templates/private_bridge"
  #     dest: "/etc/network/interfaces.d/{{ private_bridge }}"
  #   notify:
  #     - Ensure ipv4 packets forwarding is enabled part 1.
  #     - Ensure ipv4 packets forwarding is enabled part 2.
  #     - Ensure ipv6 packets forwarding is disabled.      

  - name: Generate random MAC address for dummy interface.
    command: python3 -c 'import os; print(":".join(["{:02x}".format(x) for x in b"\02x" + os.urandom(4)]))'
    register: random_mac
    when: bridge_result.changed

  - name: Create dummy interface.
    template:
      src: "./templates/desktop_interface"
      dest: "/etc/network/interfaces.d/{{ desktop_interface }}"
    with_items: "{{ random_mac['stdout'] }}"
    when: random_mac.changed    

  - name: Restart networking.
    service:
      name: networking
      state: restarted
      enabled: true
    when: bridge_result.changed
    
  - name: Ensure ipv4 packets forwarding is enabled part 1.
    sysctl:
      name: net.ipv4.ip_forward
      value: 1
      state: present

  - name: Ensure ipv4 packets forwarding is enabled part 2.
    sysctl:
      name: net.ipv4.conf.all.forwarding
      value: 1
      state: present

  - name: Ensure ipv6 packets forwarding is disabled.
    sysctl:
      name: net.ipv6.conf.all.disable_ipv6
      value: 1
      state: present
  
  - name: Ensure iptables-persistent is installed.
    package:
      name: iptables-persistent
      state: present
      
  - name: Render iptables' rules.
    template:
      src: "./templates/iptables_rules"
      dest: "/etc/iptables/rules.v4"
    register: iptables_render_result
    
  - name: Restart iptables.
    service:
      name: iptables
      state: restarted
      enabled: true 
    when: iptables_render_result.changed
    
  - name: Ensure ZIP is installed.
    package:
      name:
        - zip
        - unzip
      state: present

  - name: Ensure VyOs disk image's zip is downloaded.
    get_url:
      url: "{{ vyos_qcow_image_zip_link }}"
      dest: /tmp/vyos-1-4-qcow.zip
      checksum: sha1:e87fe2541cbd79d5cee14cdf68ab51a001ea83d8
    register: router_image

  - name: Unarchive VyOs disk that is already on the remote machine.
    unarchive:
      src: /tmp/vyos-1-4-qcow.zip
      dest: /var/lib/libvirt/images
      list_files: true
      remote_src: yes
    register: vyos_images
    when: router_image.changed or force_rebuild
    
  - name: Create VM's directory if it does not exist.
    file:
      path: /VMs/
      state: directory
      mode: '0755'

  - name: Create VM's definitions directory if it does not exist.
    file:
      path: /VMs/definitions
      state: directory
      mode: '0755'
    
  - name: Render router's definition.
    template:
      src: "./templates/router_VM.xml"
      dest: "/VMs/definitions/router_VM.xml"
    register: template
    when: router_image.changed or force_rebuild

  - name: List all VMs
    community.libvirt.virt:
      command: list_vms
    register: all_vms    

  - name: Destroy router VM if it does exsist.
    community.libvirt.virt:
      name: "{{ vyos_vm_name }}"
      command: undefine
      force: true
    when: (router_image.changed or force_rebuild) and (all_vms.list_vms is contains(vyos_vm_name))

  - name: Define router VM.
    community.libvirt.virt:
      command: define
      xml: "{{ lookup('template', 'router_VM.xml') }}"
    when: router_image.changed or force_rebuild

  - name: Start router VM.
    community.libvirt.virt:
      name: "{{ vyos_vm_name }}"
      state: running
      autostart: true
    when: router_image.changed or force_rebuild

